{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\ninterface MinerInfoShare {\n    shares: number;\n    uncles: number;\n    last_height: number;\n}\n\ninterface MinerInfo {\n    id: number;\n    address: string;\n    shares: MinerInfoShare[];\n    last_share_height: number;\n    last_share_timestamp: number;\n}\n\ninterface Payout {\n    miner: number;\n    template_id: string;\n    side_height: number;\n    main_id: string;\n    main_height: number;\n    timestamp: number;\n    coinbase_id: string;\n    coinbase_reward: number;\n    coinbase_private_key: string;\n    coinbase_output_index: number;\n    global_output_index: number;\n    including_height: number;\n}\n\ninterface Share {\n    main_id: string;\n    main_height: number;\n    template_id: string;\n    root_hash: string;\n    side_height: number;\n    parent_template_id: string;\n    miner: number;\n    effective_height: number;\n    nonce: number;\n    extra_nonce: number;\n    timestamp: number;\n    software_id: number;\n    software_version: number;\n    window_depth: number;\n    window_outputs: number;\n    difficulty: number;\n    cumulative_difficulty: number;\n    pow_difficulty: number;\n    pow_hash: string;\n    inclusion: number;\n    transaction_count: number;\n    miner_address: string;\n    main_difficulty: number;\n}\n\nclass P2pool extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"p2pool\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n    refreshInterval: ioBroker.Interval | undefined = undefined;\n    /**\n     * create URL\n     * /api/pool_info\n     * /api/miner_info/<id|address>\n     * /api/side_blocks_in_window?window=[window_size]&from=[height][&noMainStatus][&noUncles][&noMiners]\n     * /api/side_blocks_in_window/<id|address>?window=[window_size]&from=[height][&noMainStatus][&noUncles][&noMiners]\n     * /api/payouts/<id|address>?search_limit=[search_limit] 0 for all 10 is default\n     * /api/found_blocks?limit=[limit]&miner=[id|address]\n     * /api/shares?limit=[limit]&miner=[id|address][&onlyBlocks][&noMainStatus][&noUncles][&noMiners]\n     * /api/block_by_id/<blockId>[/full|/light|/raw|/info|/payouts|/coinbase]\n     * /api/block_by_height/<blockHeight>[/full|/light|/raw|/info|/payouts|/coinbase]\n     *\n     * @param Command - The command to execute, e.g., see list above\n     * @param Limit - The search limit for payouts, e.g., 0 for all, 10 is default\n     */\n    private genURL(Command: string, Limit: string): string {\n        let retVal = \"\";\n        let url = \"\";\n        if (this.config.mini_pool) {\n            url = `mini.p2pool.observer`;\n        } else {\n            url = `p2pool.observer`;\n        }\n        if (Command === \"\") {\n            this.log.error(\"Command is empty\");\n            return retVal;\n        } else if (Command === \"miner_info\") {\n            retVal = `https://${url}/api/${Command}/${this.config.monero_key}`;\n        } else if (Command === \"pool_info\") {\n            retVal = `https://${url}/api/${Command}`;\n        } else if (Command === \"payouts\") {\n            retVal = `https://${url}/api/${Command}/${this.config.monero_key}?limit=${Limit}`;\n        } else if (Command === \"found_blocks\") {\n            retVal = `https://${url}/api/${Command}?limit=${Limit}&miner=${this.config.monero_key}`;\n        } else if (Command === \"shares\") {\n            retVal = `https://${url}/api/${Command}?limit=${Limit}&miner=${this.config.monero_key}`;\n        } else {\n            this.log.error(`Unknown command: ${Command}`);\n        }\n        return retVal;\n    }\n    private async readP2Pool(Command: string, Limit: string): Promise<JSON> {\n        // This function can be used to read miner information\n        // It can be called from the updateP2pool function or elsewhere\n        // Example: this.readMinerInfo();\n        const reqUrl = this.genURL(Command, Limit);\n        this.log.debug(reqUrl);\n        let jsonData = null;\n        let validJsonData = false;\n        await axios\n            .get(reqUrl)\n            .then((res) => {\n                jsonData = res.data;\n                validJsonData = true;\n            })\n            .catch((error) => {\n                if (error instanceof Error) {\n                    this.log.error(error.message);\n                }\n                this.log.error(\"p2pool request failed.\");\n            });\n        if (validJsonData && jsonData !== null) {\n            return jsonData;\n        }\n        this.log.error(`No valid JSON data received from p2pool by fetching ${Command} with limit ${Limit}`);\n        return JSON.parse(\"{}\");\n    }\n    /**\n     * Callback function for the interval\n     */\n    private updateP2pool = async (): Promise<void> => {\n        // This function will be called every 2 seconds\n        this.log.debug(\"Callback function called\");\n        // You can add your logic here, e.g., fetching data from an API\n        const minerInfoData: MinerInfo = (await this.readP2Pool(\"miner_info\", \"0\")) as unknown as MinerInfo;\n        const poolInfoData = await this.readP2Pool(\"pool_info\", \"0\");\n        const payoutsData: Payout[] = (await this.readP2Pool(\"payouts\", \"1\")) as unknown as Payout[];\n        const foundBlocksData = await this.readP2Pool(\"found_blocks\", \"1\");\n        const sharesData: Share[] = (await this.readP2Pool(\"shares\", \"1\")) as unknown as Share[];\n        this.log.debug(`p2pool response after callback miner_info: ${JSON.stringify(minerInfoData)}`);\n        this.log.debug(`p2pool response after callback pool_info: ${JSON.stringify(poolInfoData)}`);\n        this.log.debug(`p2pool response after callback payouts: ${JSON.stringify(payoutsData)}`);\n        this.log.debug(`p2pool response after callback found_blocks: ${JSON.stringify(foundBlocksData)}`);\n        this.log.debug(`p2pool response after callback shares: ${JSON.stringify(sharesData)}`);\n        if (minerInfoData && Object.keys(minerInfoData).length > 0) {\n            await this.setState(\"raw.miner_info\", JSON.stringify(minerInfoData), true);\n            // Set additional details from miner_info\n            if (minerInfoData.last_share_height) {\n                await this.setState(\"details.miner_info.last_share_height\", minerInfoData.last_share_height, true);\n            }\n            if (minerInfoData.last_share_timestamp) {\n                await this.setState(\n                    \"details.miner_info.last_share_timestamp\",\n                    minerInfoData.last_share_timestamp,\n                    true,\n                );\n            }\n        }\n        if (poolInfoData && Object.keys(poolInfoData).length > 0) {\n            await this.setState(\"raw.pool_info\", JSON.stringify(poolInfoData), true);\n        }\n        if (payoutsData && Object.keys(payoutsData).length > 0) {\n            await this.setState(\"raw.payouts\", JSON.stringify(payoutsData), true);\n            // Set additional details from payouts\n            if (payoutsData[0].timestamp) {\n                await this.setState(\"details.payouts.timestamp\", payoutsData[0].timestamp, true);\n            }\n            if (payoutsData[0].coinbase_reward) {\n                await this.setState(\"details.payouts.coinbase_reward\", payoutsData[0].coinbase_reward, true);\n            }\n        }\n        if (foundBlocksData && Object.keys(foundBlocksData).length > 0) {\n            await this.setState(\"raw.found_blocks\", JSON.stringify(foundBlocksData), true);\n        }\n        if (sharesData && Object.keys(sharesData).length > 0) {\n            await this.setState(\"raw.shares\", JSON.stringify(sharesData), true);\n            // Set additional details from shares\n            if (sharesData[0].software_version) {\n                await this.setState(\"details.shares.software_version\", sharesData[0].software_version, true);\n                // Convert software version to human-readable format\n                const softwareVersion = sharesData[0].software_version;\n                const major = (softwareVersion >> 16) & 0xffff;\n                const minor = (softwareVersion >> 8) & 0xff;\n                const patch = softwareVersion & 0xff;\n                const softwareVersionName = `${major}.${minor}.${patch}`;\n                await this.setState(\"details.shares.software_version_name\", softwareVersionName, true);\n            }\n            if (sharesData[0].difficulty) {\n                await this.setState(\"details.shares.difficulty\", sharesData[0].difficulty, true);\n            }\n        }\n        this.log.debug(\"p2pool data update completed\");\n    };\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.setState(\"info.connection\", false, true);\n        // Initialize your adapter here\n        const reqUrl = this.genURL(\"miner_info\", \"0\");\n        this.log.debug(reqUrl);\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(`config monero key: ${this.config.monero_key}`);\n        this.log.info(\"starting p2pool observer adapter...\");\n        void this.setObjectNotExists(\"info.connection\", {\n            type: \"state\",\n            common: {\n                name: \"Connection status\",\n                type: \"boolean\",\n                role: \"indicator.connected\",\n                read: true,\n                write: false,\n                def: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"raw.miner_info\", {\n            type: \"state\",\n            common: {\n                name: \"Raw Miner Info\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"raw.pool_info\", {\n            type: \"state\",\n            common: {\n                name: \"Raw Pool Info\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"raw.payouts\", {\n            type: \"state\",\n            common: {\n                name: \"Raw Payouts\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"raw.found_blocks\", {\n            type: \"state\",\n            common: {\n                name: \"Raw Found Blocks\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"raw.shares\", {\n            type: \"state\",\n            common: {\n                name: \"Raw Shares\",\n                type: \"string\",\n                role: \"json\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        //p2pool response after callback miner_info:\n        // {\n        //   \"id\":12345,\n        //   \"address\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //   \"shares\":[\n        //   {\n        //     \"shares\":0,\n        //     \"uncles\":0,\n        //     \"last_height\":0\n        //   },\n        //   {\n        //     \"shares\":195,\n        //     \"uncles\":2,\n        //     \"last_height\":11366313\n        //   },\n        //   {\n        //     \"shares\":0,\n        //     \"uncles\":0,\n        //     \"last_height\":0\n        //   }\n        //   ],\n        //   \"last_share_height\":11366313,\n        //   \"last_share_timestamp\":1754230754\n        //}\n        void this.setObjectNotExists(\"details.miner_info.last_share_height\", {\n            type: \"state\",\n            common: {\n                name: \"Miner Info\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"details.miner_info.last_share_timestamp\", {\n            type: \"state\",\n            common: {\n                name: \"Miner Info\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        // p2pool response after callback payouts:\n        // [\n        //   {\n        //     \"miner\":12345,\n        //     \"template_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"side_height\":11359661,\n        //     \"main_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"main_height\":3469273,\n        //     \"timestamp\":1754162211,\n        //     \"coinbase_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"coinbase_reward\":219444964,\n        //     \"coinbase_private_key\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"coinbase_output_index\":138,\n        //     \"global_output_index\":136825676,\n        //     \"including_height\":11357501\n        //   }\n        // ]\n        void this.setObjectNotExists(\"details.payouts.timestamp\", {\n            type: \"state\",\n            common: {\n                name: \"Miner ID\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"details.payouts.coinbase_reward\", {\n            type: \"state\",\n            common: {\n                name: \"Coinbase Reward\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        // p2pool response after callback found_blocks: []\n        // p2pool response after callback shares:\n        // [\n        //   {\n        //     \"main_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"main_height\":3469837,\n        //     \"template_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"root_hash\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"side_height\":11366313,\n        //     \"parent_template_id\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"miner\":12345,\n        //     \"effective_height\":11366313,\n        //     \"nonce\":4294918361,\n        //     \"extra_nonce\":957395883,\n        //     \"timestamp\":1754230754,\n        //     \"software_id\":0,\n        //     \"software_version\":264448,\n        //     \"window_depth\":2160,\n        //     \"window_outputs\":653,\n        //     \"difficulty\":141309770,\n        //     \"cumulative_difficulty\":1659937539026060,\n        //     \"pow_difficulty\":22673417117,\n        //     \"pow_hash\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"inclusion\":1,\n        //     \"transaction_count\":1,\n        //     \"miner_address\":\"45ABCD1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n        //     \"main_difficulty\":690295196720\n        //   }\n        // ]\n        void this.setObjectNotExists(\"details.shares.software_version\", {\n            type: \"state\",\n            common: {\n                name: \"Main ID\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"details.shares.software_version_name\", {\n            type: \"state\",\n            common: {\n                name: \"Software Version Name\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        void this.setObjectNotExists(\"details.shares.difficulty\", {\n            type: \"state\",\n            common: {\n                name: \"Difficulty\",\n                type: \"number\",\n                role: \"value\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.updateP2pool(); // Initial call to fetch data immediately\n        this.refreshInterval = this.setInterval(this.updateP2pool, 120000); // 120 seconds\n        await this.setState(\"info.connection\", true, true);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback - function to call after everything is cleaned up\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            this.clearInterval(this.refreshInterval);\n\n            callback();\n        } catch (error) {\n            if (error instanceof Error) {\n                this.log.debug(error.message);\n            }\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id - the ID of the state that changed\n     * @param state - the state object\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new P2pool(options);\n} else {\n    // otherwise start the instance directly\n    (() => new P2pool())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
