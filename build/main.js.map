{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass P2pool extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"p2pool\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n    refreshInterval: ioBroker.Interval | undefined = undefined;\n    /**\n     * create URL\n     * /api/pool_info\n     * /api/miner_info/<id|address>\n     * /api/side_blocks_in_window?window=[window_size]&from=[height][&noMainStatus][&noUncles][&noMiners]\n     * /api/side_blocks_in_window/<id|address>?window=[window_size]&from=[height][&noMainStatus][&noUncles][&noMiners]\n     * /api/payouts/<id|address>?search_limit=[search_limit] 0 for all 10 is default\n     * /api/found_blocks?limit=[limit]&miner=[id|address]\n     * /api/shares?limit=[limit]&miner=[id|address][&onlyBlocks][&noMainStatus][&noUncles][&noMiners]\n     * /api/block_by_id/<blockId>[/full|/light|/raw|/info|/payouts|/coinbase]\n     * /api/block_by_height/<blockHeight>[/full|/light|/raw|/info|/payouts|/coinbase]\n     */\n    private genURL(Command: string, SearchLimit: string): string {\n        let retVal = \"\";\n        let url = \"\";\n        if (this.config.mini_pool) {\n            url = `mini.p2pool.observer`;\n        } else {\n            url = `p2pool.observer`;\n        }\n        if (Command === \"\") {\n            this.log.error(\"Command is empty\");\n            return retVal;\n        } else if (Command === \"miner_info\") {\n            retVal = `https://${url}/api/${Command}/${this.config.monero_key}`;\n        } else if (Command === \"pool_info\") {\n            retVal = `https://${url}/api/${Command}`;\n        } else if (Command === \"payouts\") {\n            retVal = `https://${url}/api/${Command}/${this.config.monero_key}?search_limit=${SearchLimit}`;\n        } else {\n            this.log.error(`Unknown command: ${Command}`);\n        }\n        return retVal;\n    }\n    private async readMinerInfo(): Promise<JSON> {\n        // This function can be used to read miner information\n        // It can be called from the updateP2pool function or elsewhere\n        // Example: this.readMinerInfo();\n        let reqUrl = this.genURL(\"miner_info\", \"0\");\n        this.log.debug(reqUrl);\n        let jsonData = null;\n        let validJsonData = false;\n        await axios\n            .get(reqUrl)\n            .then(async (res) => {\n                jsonData = res.data;\n                validJsonData = true;\n                if (validJsonData) {\n                    try {\n                        this.log.info(`p2pool response: ${JSON.stringify(jsonData)}`);\n                    } catch (error) {\n                        if (error instanceof Error) {\n                            this.log.error(error.message);\n                        }\n                        this.log.error(`json format invalid:${JSON.stringify(jsonData)}`);\n                    }\n                } else {\n                    this.log.error(`p2pool rejected the request: ${res.data.toString()}`);\n                }\n            })\n            .catch((error) => {\n                if (error instanceof Error) {\n                    this.log.error(error.message);\n                }\n                this.log.error(\"p2pool request failed.\");\n            });\n        if (validJsonData && jsonData !== null) {\n            return jsonData;\n        } else {\n            this.log.error(\"No valid JSON data received from p2pool.\");\n            return JSON.parse(\"{}\");\n        }\n    }\n    /**\n     * Callback function for the interval\n     */\n    private updateP2pool = async (): Promise<void> => {\n        // This function will be called every 2 seconds\n        this.log.debug(\"Callback function called\");\n        // You can add your logic here, e.g., fetching data from an API\n        let jsonData = await this.readMinerInfo();\n        this.log.info(`p2pool response after callback: ${JSON.stringify(jsonData)}`);\n        if (jsonData && Object.keys(jsonData).length > 0) {\n            // Process the JSON data as needed\n            this.log.info(`Received data: ${JSON.stringify(jsonData)}`);\n            // Here you can update states or perform other actions with the received data\n        }\n    };\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        let reqUrl = this.genURL(\"miner_info\", \"0\");\n        this.log.debug(reqUrl);\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(\"config monero key: \" + this.config.monero_key);\n        this.log.info(\"starting p2pool observer adapter...\");\n        this.updateP2pool(); // Initial call to fetch data immediately\n        this.refreshInterval = this.setInterval(this.updateP2pool, 120000); // 120 seconds\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            this.clearInterval(this.refreshInterval);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new P2pool(options);\n} else {\n    // otherwise start the instance directly\n    (() => new P2pool())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
